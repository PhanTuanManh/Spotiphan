import { parseFile } from "music-metadata";
import { uploadToCloudinary } from "../lib/cloudinary.js";
import { Album } from "../models/album.model.js";
import { Song } from "../models/song.model.js";
import { User } from "../models/user.model.js";
import mongoose from "mongoose";

export const getAllSongs = async (req, res, next) => {
  const { limit, page } = req.query;
  const skip = (page - 1) * limit;

  try {
    const songs = await Song.find({
      $or: [
        { isSingle: true, status: "approved" }, // L·∫•y Single ƒë√£ duy·ªát
        { albumId: { $ne: null } }, // L·∫•y b√†i h√°t c√≥ album
      ],
    })
      .populate({
        path: "albumId",
        match: { status: "approved" }, // Ch·ªâ l·∫•y album ƒë√£ duy·ªát
      })
      .populate("artist", "fullName imageUrl") // L·∫•y th√¥ng tin ng∆∞·ªùi b√†i h√°t
      .sort({ createdAt: -1 })
      .skip(skip)
      .limit(parseInt(limit));

    // L·ªçc b√†i h√°t h·ª£p l·ªá
    const filteredSongs = songs.filter((song) => song.isSingle || song.albumId);

    res.status(200).json({
      success: true,
      data: filteredSongs,
    });
  } catch (error) {
    next(error);
  }
};

export const getSongsByArtist = async (req, res, next) => {
  const { artistId } = req.params;
  const { limit = 10, page = 1, type } = req.query;
  const skip = (page - 1) * limit;

  try {
    // üîπ Ki·ªÉm tra xem artistId c√≥ h·ª£p l·ªá kh√¥ng
    if (!mongoose.Types.ObjectId.isValid(artistId)) {
      return res.status(400).json({ message: "Invalid artistId" });
    }

    // üîπ T·∫°o b·ªô l·ªçc ƒë·ªông
    let filter = { artist: new mongoose.Types.ObjectId(artistId) };

    if (type === "album") {
      filter.albumId = { $ne: null }; // ‚úÖ L·ªçc b√†i h√°t c√≥ album
    } else if (type === "single") {
      filter.isSingle = true; // ‚úÖ L·ªçc b√†i h√°t c√≥ `isSingle: true`
    }

    console.log("üîé MongoDB Filter:", JSON.stringify(filter, null, 2));

    // üîπ Aggregation pipeline ƒë·ªÉ s·∫Øp x·∫øp `pending` tr∆∞·ªõc
    const songs = await Song.aggregate([
      { $match: filter }, // L·ªçc theo artist & type
      {
        $addFields: {
          statusPriority: {
            $switch: {
              branches: [
                { case: { $eq: ["$status", "pending"] }, then: 1 }, // üü° pending tr∆∞·ªõc
                { case: { $eq: ["$status", "approved"] }, then: 2 }, // ‚úÖ approved sau
                { case: { $eq: ["$status", "rejected"] }, then: 3 }, // ‚ùå rejected cu·ªëi
              ],
              default: 4,
            },
          },
        },
      },
      { $sort: { statusPriority: 1, createdAt: -1 } }, // S·∫Øp x·∫øp: pending > approved > rejected, sau ƒë√≥ theo createdAt m·ªõi nh·∫•t
      { $skip: skip },
      { $limit: parseInt(limit) },
      {
        $lookup: {
          from: "albums",
          localField: "albumId",
          foreignField: "_id",
          as: "albumId",
        },
      },
      {
        $lookup: {
          from: "users",
          localField: "artist",
          foreignField: "_id",
          as: "artist",
        },
      },
      { $unwind: "$artist" },
    ]);

    console.log("üéµ Songs Found:", songs.length);

    // üîπ Ki·ªÉm tra n·∫øu kh√¥ng c√≥ b√†i h√°t n√†o
    if (!songs.length) {
      console.warn("‚ö†Ô∏è Kh√¥ng c√≥ b√†i h√°t n√†o.");
      return res
        .status(200)
        .json({ success: true, data: [], message: "Kh√¥ng c√≥ b√†i h√°t n√†o." });
    }

    res.status(200).json({ success: true, data: songs });
  } catch (error) {
    console.error("‚ùå L·ªói khi l·∫•y b√†i h√°t:", error);
    next(error);
  }
};

export const createSong = async (req, res, next) => {
  try {
    // Ki·ªÉm tra xem c√≥ ƒë·ªß file kh√¥ng
    if (!req.files || !req.files.audioFile || !req.files.imageFile) {
      return res
        .status(400)
        .json({ message: "Vui l√≤ng t·∫£i l√™n ƒë·∫ßy ƒë·ªß t·ªáp √¢m thanh v√† ·∫£nh b√¨a" });
    }

    const { title, albumId, isSingle } = req.body;
    const clerkUserId = req.auth.userId; // Clerk ID t·ª´ Clerk

    // üîπ T√¨m user trong MongoDB d·ª±a tr√™n Clerk ID
    const artist = await User.findOne({ clerkId: clerkUserId });
    if (!artist || artist.role !== "artist") {
      return res
        .status(403)
        .json({ message: "Ch·ªâ artist m·ªõi c√≥ quy·ªÅn th√™m b√†i h√°t" });
    }

    // ‚úÖ Chuy·ªÉn ƒë·ªïi `isSingle` sang boolean ƒë√∫ng c√°ch
    const isSingleBool = isSingle === "true" || isSingle === true; // Chuy·ªÉn ƒë·ªïi c·∫£ string v√† boolean
    const albumIdValid =
      albumId &&
      typeof albumId === "string" &&
      albumId !== "null" &&
      albumId !== ""; // ƒê·∫£m b·∫£o `albumId` l√† string h·ª£p l·ªá

    // ‚úÖ Ch·ªâ m·ªôt trong hai c√≥ th·ªÉ ƒë∆∞·ª£c ch·ªçn, kh√¥ng ƒë∆∞·ª£c ƒë·ªìng th·ªùi c√≥ c·∫£ `isSingle: true` v√† `albumId`
    if (isSingleBool && albumIdValid) {
      return res.status(400).json({
        message: "B√†i h√°t kh√¥ng th·ªÉ v·ª´a l√† Single/EP v·ª´a thu·ªôc m·ªôt Album.",
      });
    }

    if (!isSingleBool && !albumIdValid) {
      return res.status(400).json({
        message: "B·∫°n ph·∫£i ch·ªçn m·ªôt trong hai: Single/EP ho·∫∑c Album.",
      });
    }

    // N·∫øu c√≥ albumId, ki·ªÉm tra album c√≥ t·ªìn t·∫°i kh√¥ng
    let album = null;
    if (albumId) {
      album = await Album.findById(albumId);
      if (!album) {
        return res.status(404).json({ message: "Album kh√¥ng t·ªìn t·∫°i" });
      }

      // Ki·ªÉm tra quy·ªÅn s·ªü h·ªØu album
      if (album.artist.toString() !== artist._id.toString()) {
        return res
          .status(403)
          .json({ message: "B·∫°n kh√¥ng c√≥ quy·ªÅn th√™m b√†i h√°t v√†o album n√†y" });
      }

      // Ki·ªÉm tra b√†i h√°t c√≥ b·ªã tr√πng trong album kh√¥ng
      const existingSong = await Song.findOne({ title, albumId });
      if (existingSong) {
        return res
          .status(400)
          .json({ message: "B√†i h√°t n√†y ƒë√£ t·ªìn t·∫°i trong album." });
      }
    }

    // ‚úÖ Upload file ·∫£nh l√™n Cloudinary
    const imageFile = req.files.imageFile;
    const imageUrl = await uploadToCloudinary(imageFile, "image");

    // ‚úÖ L·∫•y file audio
    const audioFile = req.files.audioFile;

    // ‚úÖ T√≠nh `duration` t·ª´ file audio
    const metadata = await parseFile(audioFile.tempFilePath);
    const duration = Math.round(metadata.format.duration) || 0; // ƒê∆°n v·ªã: gi√¢y

    // ‚úÖ Upload file audio l√™n Cloudinary
    const audioUrl = await uploadToCloudinary(audioFile, "auto");

    // ‚úÖ T·∫°o b√†i h√°t m·ªõi trong MongoDB
    const song = new Song({
      title,
      artist: artist._id,
      audioUrl,
      imageUrl,
      duration,
      albumId: album ? album._id : null,
      isSingle: album ? false : true, // ‚úÖ N·∫øu c√≥ album, `isSingle` ph·∫£i `false`
    });

    await song.save();

    // N·∫øu b√†i h√°t thu·ªôc album, c·∫≠p nh·∫≠t album
    if (album) {
      album.songs.push(song._id);
      await album.save();
    }

    res.status(201).json({ message: "B√†i h√°t ƒë√£ ƒë∆∞·ª£c t·∫°o th√†nh c√¥ng", song });
  } catch (error) {
    console.error("‚ùå L·ªói khi t·∫°o b√†i h√°t:", error);
    res.status(500).json({ message: "L·ªói server khi t·∫°o b√†i h√°t." });
  }
};

export const toggleArchiveSong = async (req, res, next) => {
  try {
    const { songId } = req.params;
    const clerkUserId = req.auth.userId;

    // üîπ X√°c th·ª±c Artist
    const artist = await User.findOne({ clerkId: clerkUserId });
    if (!artist || artist.role !== "artist") {
      return res.status(403).json({
        message: "Ch·ªâ artist m·ªõi c√≥ quy·ªÅn thay ƒë·ªïi tr·∫°ng th√°i b√†i h√°t",
      });
    }

    // üîπ T√¨m b√†i h√°t
    const song = await Song.findById(songId);
    if (!song) {
      return res.status(404).json({ message: "B√†i h√°t kh√¥ng t·ªìn t·∫°i" });
    }

    // üîπ Ki·ªÉm tra quy·ªÅn s·ªü h·ªØu
    if (song.artist.toString() !== artist._id.toString()) {
      return res.status(403).json({
        message: "B·∫°n kh√¥ng c√≥ quy·ªÅn thay ƒë·ªïi tr·∫°ng th√°i b√†i h√°t n√†y",
      });
    }

    // ‚úÖ Toggle tr·∫°ng th√°i gi·ªØa "archived" ‚Üî "active"
    song.status = song.status === "archived" ? "pending" : "archived";
    await song.save();

    res.status(200).json({
      message: `B√†i h√°t ƒë√£ chuy·ªÉn sang tr·∫°ng th√°i ${song.status}`,
      song,
    });
  } catch (error) {
    console.error("‚ùå L·ªói khi thay ƒë·ªïi tr·∫°ng th√°i b√†i h√°t:", error);
    res
      .status(500)
      .json({ message: "L·ªói server khi thay ƒë·ªïi tr·∫°ng th√°i b√†i h√°t." });
  }
};

export const updateSong = async (req, res, next) => {
  try {
    const { songId } = req.params; // L·∫•y ID b√†i h√°t t·ª´ URL
    const { title, albumId, isSingle } = req.body;
    const clerkUserId = req.auth.userId; // Clerk ID t·ª´ Clerk

    // üîπ T√¨m user trong MongoDB d·ª±a tr√™n Clerk ID
    const artist = await User.findOne({ clerkId: clerkUserId });
    if (!artist || artist.role !== "artist") {
      return res
        .status(403)
        .json({ message: "Ch·ªâ artist m·ªõi c√≥ quy·ªÅn c·∫≠p nh·∫≠t b√†i h√°t" });
    }

    // üîπ Ki·ªÉm tra b√†i h√°t c√≥ t·ªìn t·∫°i kh√¥ng
    const song = await Song.findById(songId);
    if (!song) {
      return res.status(404).json({ message: "B√†i h√°t kh√¥ng t·ªìn t·∫°i" });
    }

    // üîπ Ki·ªÉm tra quy·ªÅn s·ªü h·ªØu b√†i h√°t
    if (song.artist.toString() !== artist._id.toString()) {
      return res
        .status(403)
        .json({ message: "B·∫°n kh√¥ng c√≥ quy·ªÅn ch·ªânh s·ª≠a b√†i h√°t n√†y" });
    }

    // üîπ Ki·ªÉm tra logic Album / Single
    let album = null;
    if ((!isSingle && !albumId) || (isSingle && albumId)) {
      return res
        .status(400)
        .json({ message: "B·∫°n ph·∫£i ch·ªçn m·ªôt trong hai: Single/EP ho·∫∑c Album" });
    }

    // üîπ N·∫øu c√≥ albumId, ki·ªÉm tra album h·ª£p l·ªá
    if (albumId) {
      album = await Album.findById(albumId);
      if (!album) {
        return res.status(404).json({ message: "Album kh√¥ng t·ªìn t·∫°i" });
      }

      // Ki·ªÉm tra quy·ªÅn s·ªü h·ªØu album
      if (album.artist.toString() !== artist._id.toString()) {
        return res
          .status(403)
          .json({ message: "B·∫°n kh√¥ng c√≥ quy·ªÅn th√™m b√†i h√°t v√†o album n√†y" });
      }

      // Ki·ªÉm tra b√†i h√°t c√≥ b·ªã tr√πng trong album kh√¥ng
      const existingSong = await Song.findOne({ title, albumId });
      if (existingSong && existingSong._id.toString() !== songId) {
        return res
          .status(400)
          .json({ message: "B√†i h√°t n√†y ƒë√£ t·ªìn t·∫°i trong album." });
      }
    }

    // üîπ C·∫≠p nh·∫≠t ti√™u ƒë·ªÅ b√†i h√°t n·∫øu c√≥
    if (title) {
      song.title = title;
    }

    // üîπ C·∫≠p nh·∫≠t album n·∫øu c√≥
    song.albumId = album ? album._id : null;
    song.isSingle = !!isSingle;

    // ‚úÖ Upload ·∫£nh m·ªõi n·∫øu c√≥
    if (req.files && req.files.imageFile) {
      const imageFile = req.files.imageFile;
      const imageUrl = await uploadToCloudinary(imageFile, "image");
      song.imageUrl = imageUrl;
    }

    // ‚úÖ Upload file audio m·ªõi n·∫øu c√≥
    if (req.files && req.files.audioFile) {
      const audioFile = req.files.audioFile;

      // ‚úÖ T√≠nh `duration` t·ª´ file audio m·ªõi
      const metadata = await parseFile(audioFile.tempFilePath);
      song.duration = Math.round(metadata.format.duration) || song.duration; // N·∫øu kh√¥ng c√≥ duration m·ªõi, gi·ªØ nguy√™n

      // ‚úÖ Upload file audio m·ªõi l√™n Cloudinary
      const audioUrl = await uploadToCloudinary(audioFile, "auto");
      song.audioUrl = audioUrl;
    }

    // ‚úÖ L∆∞u thay ƒë·ªïi v√†o MongoDB
    await song.save();

    res
      .status(200)
      .json({ message: "B√†i h√°t ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t th√†nh c√¥ng", song });
  } catch (error) {
    console.error("‚ùå L·ªói khi c·∫≠p nh·∫≠t b√†i h√°t:", error);
    res.status(500).json({ message: "L·ªói server khi c·∫≠p nh·∫≠t b√†i h√°t." });
  }
};

export const getSinglesByArtist = async (req, res) => {
  try {
    let { page = 1, limit = 10 } = req.query;
    const { artistId } = req.params; // ‚úÖ L·∫•y ID artist t·ª´ request params

    // Chuy·ªÉn ƒë·ªïi ki·ªÉu d·ªØ li·ªáu
    page = parseInt(page);
    limit = parseInt(limit);

    // Ki·ªÉm tra n·∫øu kh√¥ng c√≥ artistId
    if (!artistId) {
      return res.status(400).json({ message: "Missing artistId parameter" });
    }

    // T√≠nh s·ªë l∆∞·ª£ng b√†i h√°t b·ªè qua (skip)
    const skip = (page - 1) * limit;

    // L·∫•y danh s√°ch Single/EP c·ªßa artist
    const singles = await Song.find({ isSingle: true, artist: artistId })
      .populate("artist")
      .sort({
        status: 1, // "pending" tr∆∞·ªõc (pending < approved < rejected)
        createdAt: -1, // M·ªõi nh·∫•t tr∆∞·ªõc
      })
      .skip(skip)
      .limit(limit);

    // ƒê·∫øm t·ªïng s·ªë b√†i h√°t Single/EP c·ªßa artist
    const totalSingles = await Song.countDocuments({
      isSingle: true,
      artist: artistId,
    });
    const totalPages = Math.ceil(totalSingles / limit);

    res.status(200).json({
      page,
      totalPages,
      totalSingles,
      limit,
      singles,
    });
  } catch (error) {
    console.error("‚ùå Error retrieving artist singles/EPs:", error);
    res.status(500).json({ message: "Error retrieving artist singles/EPs" });
  }
};

export const deleteSong = async (req, res, next) => {
  try {
    const { songId } = req.params;
    const clerkUserId = req.auth.userId;

    // üîπ X√°c th·ª±c Artist
    const artist = await User.findOne({ clerkId: clerkUserId });
    if (!artist || artist.role !== "artist") {
      return res
        .status(403)
        .json({ message: "Ch·ªâ artist m·ªõi c√≥ quy·ªÅn x√≥a b√†i h√°t" });
    }

    // üîπ T√¨m b√†i h√°t
    const song = await Song.findById(songId);
    if (!song) {
      return res.status(404).json({ message: "B√†i h√°t kh√¥ng t·ªìn t·∫°i" });
    }

    // üîπ Ki·ªÉm tra quy·ªÅn s·ªü h·ªØu
    if (song.artist.toString() !== artist._id.toString()) {
      return res
        .status(403)
        .json({ message: "B·∫°n kh√¥ng c√≥ quy·ªÅn x√≥a b√†i h√°t n√†y" });
    }

    // ‚úÖ X√≥a b√†i h√°t
    await song.deleteOne();
    res.status(200).json({ message: "B√†i h√°t ƒë√£ ƒë∆∞·ª£c x√≥a" });
  } catch (error) {
    console.error("‚ùå L·ªói khi x√≥a b√†i h√°t:", error);
    res.status(500).json({ message: "L·ªói server khi x√≥a b√†i h√°t." });
  }
};
