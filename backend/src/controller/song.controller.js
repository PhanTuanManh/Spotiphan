import { Song } from "../models/song.model.js";
import { UserListeningHistory } from "../models/userListeningHistory.model.js";
import mongoose from "mongoose";

// L·∫•y t·∫•t c·∫£ b√†i h√°t ƒë√£ ƒë∆∞·ª£c duy·ªát c√≥ ph√¢n trang
export const getAllSongs = async (req, res, next) => {
  const { limit, page } = req.query;
  const skip = (page - 1) * limit;

  try {
    const songs = await Song.find({
      $or: [
        { isSingle: true, status: "approved" }, // L·∫•y Single ƒë√£ duy·ªát
        { albumId: { $ne: null } }, // L·∫•y b√†i h√°t c√≥ album
      ],
    })
      .populate({
        path: "albumId",
        match: { status: "approved" }, // Ch·ªâ l·∫•y album ƒë√£ duy·ªát
      })
      .populate("artist", "fullName imageUrl") // L·∫•y th√¥ng tin ng∆∞·ªùi b√†i h√°t
      .sort({ createdAt: -1 })
      .skip(skip)
      .limit(parseInt(limit));

    // L·ªçc b√†i h√°t h·ª£p l·ªá
    const filteredSongs = songs.filter((song) => song.isSingle || song.albumId);

    res.status(200).json({
      success: true,
      data: filteredSongs,
    });
  } catch (error) {
    next(error);
  }
};

export const createSong = async (req, res, next) => {
  try {
    // Ki·ªÉm tra xem c√≥ ƒë·ªß file kh√¥ng
    if (!req.files || !req.files.audioFile || !req.files.imageFile) {
      return res
        .status(400)
        .json({ message: "Vui l√≤ng t·∫£i l√™n ƒë·∫ßy ƒë·ªß t·ªáp √¢m thanh v√† ·∫£nh b√¨a" });
    }

    const { title, albumId, isSingle } = req.body;
    const artistId = req.auth.userId;

    // Ki·ªÉm tra user c√≥ ph·∫£i artist kh√¥ng
    const artist = await User.findById(artistId);
    if (!artist || artist.role !== "artist") {
      return res
        .status(403)
        .json({ message: "Ch·ªâ artist m·ªõi c√≥ quy·ªÅn th√™m b√†i h√°t" });
    }

    // Ki·ªÉm tra ch·ªâ ƒë∆∞·ª£c ch·ªçn m·ªôt trong hai: isSingle ho·∫∑c albumId
    if ((!isSingle && !albumId) || (isSingle && albumId)) {
      return res
        .status(400)
        .json({ message: "B·∫°n ph·∫£i ch·ªçn m·ªôt trong hai: Single/EP ho·∫∑c Album" });
    }

    // N·∫øu c√≥ albumId, ki·ªÉm tra album c√≥ t·ªìn t·∫°i kh√¥ng
    let album = null;
    if (albumId) {
      album = await Album.findById(albumId);
      if (!album) {
        return res.status(404).json({ message: "Album kh√¥ng t·ªìn t·∫°i" });
      }

      // Ki·ªÉm tra quy·ªÅn s·ªü h·ªØu album
      if (album.artist.toString() !== artistId) {
        return res
          .status(403)
          .json({ message: "B·∫°n kh√¥ng c√≥ quy·ªÅn th√™m b√†i h√°t v√†o album n√†y" });
      }

      // Ki·ªÉm tra b√†i h√°t c√≥ b·ªã tr√πng trong album kh√¥ng
      const existingSong = await Song.findOne({ title, albumId });
      if (existingSong) {
        return res
          .status(400)
          .json({ message: "B√†i h√°t n√†y ƒë√£ t·ªìn t·∫°i trong album." });
      }
    }

    // Upload file ·∫£nh l√™n Cloudinary
    const imageFile = req.files.imageFile;
    const imageUrl = await uploadToCloudinary(imageFile);

    // ‚úÖ L∆∞u file audio v√†o `public/uploads/` t·∫°m th·ªùi tr∆∞·ªõc khi upload l√™n Cloudinary
    const audioFile = req.files.audioFile;
    const tempFilePath = path.join(
      process.cwd(),
      "public/uploads",
      audioFile.name
    );
    await audioFile.mv(tempFilePath); // Di chuy·ªÉn file v√†o th∆∞ m·ª•c t·∫°m

    // ‚úÖ T√≠nh `duration` t·ª´ file audio
    const metadata = await parseFile(tempFilePath);
    const duration = Math.round(metadata.format.duration); // ƒê∆°n v·ªã: gi√¢y

    // ‚úÖ Upload file audio l√™n Cloudinary
    const audioUrl = await uploadToCloudinary(audioFile, "audio"); // T·∫£i l√™n Cloudinary

    // X√≥a file t·∫°m sau khi upload
    await fs.unlink(tempFilePath);

    // ‚úÖ T·∫°o b√†i h√°t m·ªõi trong MongoDB
    const song = new Song({
      title,
      artist: artist._id,
      audioUrl,
      imageUrl,
      duration, // üïí T·ª± ƒë·ªông t√≠nh duration
      albumId: album ? album._id : null,
      isSingle: !!isSingle,
    });

    await song.save();

    // N·∫øu b√†i h√°t thu·ªôc album, c·∫≠p nh·∫≠t album
    if (album) {
      album.songs.push(song._id);
      await album.save();
    }

    res.status(201).json({ message: "B√†i h√°t ƒë√£ ƒë∆∞·ª£c t·∫°o th√†nh c√¥ng", song });
  } catch (error) {
    console.error("‚ùå L·ªói khi t·∫°o b√†i h√°t:", error);
    next(error);
  }
};

export const archiveSong = async (req, res) => {
  try {
    const { songId } = req.params;

    const song = await Song.findById(songId);
    if (!song) {
      return res.status(404).json({ message: "Song not found" });
    }

    // Ki·ªÉm tra quy·ªÅn c·ªßa artist
    if (song.artist.toString() !== artistId) {
      return res
        .status(403)
        .json({ message: "B·∫°n kh√¥ng c√≥ quy·ªÅn archive b√†i h√°t n√†y." });
    }

    song.status = "archived";
    await song.save();

    res.status(200).json({ message: "Song archived successfully" });
  } catch (error) {
    res.status(500).json({ message: "Error archiving song" });
  }
};

export const updateSong = async (req, res, next) => {
  try {
    const { songId } = req.params;
    const { title } = req.body;
    const artistId = req.auth.userId;

    // üîç T√¨m b√†i h√°t
    const song = await Song.findById(songId);
    if (!song) {
      return res.status(404).json({ message: "B√†i h√°t kh√¥ng t·ªìn t·∫°i" });
    }

    // üîê Ki·ªÉm tra quy·ªÅn s·ªü h·ªØu
    if (song.artist.toString() !== artistId) {
      return res
        .status(403)
        .json({ message: "B·∫°n kh√¥ng c√≥ quy·ªÅn ch·ªânh s·ª≠a b√†i h√°t n√†y" });
    }

    // ‚úÖ Ki·ªÉm tra n·∫øu c·∫ßn update ·∫£nh b√¨a ho·∫∑c file nh·∫°c
    let imageUrl = song.imageUrl;
    let audioUrl = song.audioUrl;
    let duration = song.duration; // üïí N·∫øu kh√¥ng update file nh·∫°c, gi·ªØ nguy√™n duration

    if (req.files) {
      // ‚úÖ N·∫øu c√≥ c·∫≠p nh·∫≠t ·∫£nh b√¨a
      if (req.files.imageFile) {
        imageUrl = await uploadToCloudinary(req.files.imageFile);
      }

      // ‚úÖ N·∫øu c√≥ c·∫≠p nh·∫≠t file nh·∫°c
      if (req.files.audioFile) {
        const audioFile = req.files.audioFile;
        const tempFilePath = path.join(
          process.cwd(),
          "public/uploads",
          audioFile.name
        );

        // ‚úÖ L∆∞u file t·∫°m
        await audioFile.mv(tempFilePath);

        // ‚úÖ T√≠nh `duration` c·ªßa file m·ªõi
        const metadata = await parseFile(tempFilePath);
        duration = Math.round(metadata.format.duration); // üïí L·∫•y th·ªùi l∆∞·ª£ng ch√≠nh x√°c

        // ‚úÖ Upload file nh·∫°c m·ªõi l√™n Cloudinary
        audioUrl = await uploadToCloudinary(audioFile, "audio");

        // ‚úÖ X√≥a file t·∫°m sau khi upload
        await fs.unlink(tempFilePath);
      }
    }

    // ‚úÖ C·∫≠p nh·∫≠t b√†i h√°t
    song.title = title || song.title;
    song.duration = duration;
    song.imageUrl = imageUrl;
    song.audioUrl = audioUrl;

    await song.save();

    res.status(200).json({ message: "C·∫≠p nh·∫≠t b√†i h√°t th√†nh c√¥ng", song });
  } catch (error) {
    console.error("‚ùå L·ªói khi c·∫≠p nh·∫≠t b√†i h√°t:", error);
    next(error);
  }
};
