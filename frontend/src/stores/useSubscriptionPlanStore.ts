import { create } from "zustand";
import { axiosInstance } from "@/lib/axios";
import { ISubscriptionPlan } from "@/types";

interface SubscriptionState {
  plans: ISubscriptionPlan[];
  selectedPlan: ISubscriptionPlan | null;
  loading: boolean;
  error: string | null;
  
  getPlans: () => Promise<void>;
  getPlanById: (planId: string) => Promise<void>;
  createPlan: (data: Omit<ISubscriptionPlan, "_id" | "createdAt" | "updatedAt">) => Promise<void>;
  updatePlan: (planId: string, data: Partial<ISubscriptionPlan>) => Promise<void>;
  deletePlan: (planId: string) => Promise<void>;
  updateUserSubscription: (planId: string) => Promise<void>;
}

export const useSubscriptionStore = create<SubscriptionState>((set) => ({
  plans: [],
  selectedPlan: null,
  loading: false,
  error: null,

  // üìå L·∫•y danh s√°ch subscription plans
  getPlans: async () => {
    set({ loading: true, error: null });
    try {
      const response = await axiosInstance.get(`/subscriptions`);
      set({ plans: response.data.subscriptionPlans });
    } catch (error: any) {
      set({ error: error.message || "L·ªói khi l·∫•y danh s√°ch g√≥i ƒëƒÉng k√Ω" });
    } finally {
      set({ loading: false });
    }
  },

  // üìå L·∫•y th√¥ng tin chi ti·∫øt m·ªôt subscription plan
  getPlanById: async (planId) => {
    set({ loading: true, error: null });
    try {
      const response = await axiosInstance.get(`/subscriptions/${planId}`);
      set({ selectedPlan: response.data.subscriptionPlan });
    } catch (error: any) {
      set({ error: error.message || "L·ªói khi l·∫•y th√¥ng tin g√≥i ƒëƒÉng k√Ω" });
    } finally {
      set({ loading: false });
    }
  },

  // üìå T·∫°o subscription plan m·ªõi (ch·ªâ Admin)
  createPlan: async (data) => {
    set({ loading: true, error: null });
    try {
      await axiosInstance.post(`/subscriptions`, data);
      await useSubscriptionStore.getState().getPlans();
    } catch (error: any) {
      set({ error: error.message || "L·ªói khi t·∫°o g√≥i ƒëƒÉng k√Ω" });
    } finally {
      set({ loading: false });
    }
  },

  // üìå C·∫≠p nh·∫≠t subscription plan (ch·ªâ Admin)
  updatePlan: async (planId, data) => {
    set({ loading: true, error: null });
    try {
      await axiosInstance.put(`/subscriptions/${planId}`, data);
      await useSubscriptionStore.getState().getPlans();
    } catch (error: any) {
      set({ error: error.message || "L·ªói khi c·∫≠p nh·∫≠t g√≥i ƒëƒÉng k√Ω" });
    } finally {
      set({ loading: false });
    }
  },

  // üìå X√≥a subscription plan (ch·ªâ Admin)
  deletePlan: async (planId) => {
    set({ loading: true, error: null });
    try {
      await axiosInstance.delete(`/subscriptions/${planId}`);
      await useSubscriptionStore.getState().getPlans();
    } catch (error: any) {
      set({ error: error.message || "L·ªói khi x√≥a g√≥i ƒëƒÉng k√Ω" });
    } finally {
      set({ loading: false });
    }
  },

  // üìå Ng∆∞·ªùi d√πng c·∫≠p nh·∫≠t subscription plan c·ªßa m√¨nh
  updateUserSubscription: async (planId) => {
    set({ loading: true, error: null });
    try {
      await axiosInstance.put(`/me/subscription`, { planId });
      await useSubscriptionStore.getState().getPlans();
    } catch (error: any) {
      set({ error: error.message || "L·ªói khi c·∫≠p nh·∫≠t g√≥i ƒëƒÉng k√Ω c·ªßa ng∆∞·ªùi d√πng" });
    } finally {
      set({ loading: false });
    }
  },
}));
