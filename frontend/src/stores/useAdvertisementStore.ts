import { create } from "zustand";
import { axiosInstance } from "@/lib/axios";
import { IAdvertisement } from "@/types";

interface AdvertisementState {
  advertisements: IAdvertisement[]; // Danh s√°ch qu·∫£ng c√°o active cho ng∆∞·ªùi d√πng
  allAdvertisements: IAdvertisement[]; // Danh s√°ch t·∫•t c·∫£ qu·∫£ng c√°o (Admin)
  loading: boolean;
  error: string | null;

  getActiveAdvertisements: () => Promise<void>; // L·∫•y qu·∫£ng c√°o active
  getAllAdvertisements: (page?: number, limit?: number) => Promise<void>; // L·∫•y t·∫•t c·∫£ qu·∫£ng c√°o (Admin)
  createAdvertisement: (
    data: Omit<IAdvertisement, "_id" | "createdAt" | "updatedAt">
  ) => Promise<void>;
  updateAdvertisement: (
    id: string,
    data: Partial<IAdvertisement>
  ) => Promise<void>; // C·∫≠p nh·∫≠t qu·∫£ng c√°o
  toggleAdvertisementActive: (id: string) => Promise<void>; // B·∫≠t/t·∫Øt qu·∫£ng c√°o
  deleteAdvertisement: (advertisementId: string) => Promise<void>; // X√≥a qu·∫£ng c√°o
}

export const useAdvertisementStore = create<AdvertisementState>((set) => ({
  advertisements: [],
  allAdvertisements: [],
  loading: false,
  error: null,

  // üîπ L·∫•y danh s√°ch qu·∫£ng c√°o ƒëang ho·∫°t ƒë·ªông
  getActiveAdvertisements: async () => {
    set({ loading: true, error: null });
    try {
      const response = await axiosInstance.get(`/advertisements/active`);
      set({ advertisements: response.data.ads });
    } catch (error: any) {
      set({ error: error.message || "L·ªói khi l·∫•y danh s√°ch qu·∫£ng c√°o active" });
    } finally {
      set({ loading: false });
    }
  },

  // üîπ L·∫•y t·∫•t c·∫£ qu·∫£ng c√°o (Admin)
  getAllAdvertisements: async (page = 1, limit = 10) => {
    set({ loading: true, error: null });
    try {
      const response = await axiosInstance.get(`/admin/advertisements`, {
        params: { page, limit },
      });
      set({ allAdvertisements: response.data.ads });
    } catch (error: any) {
      set({
        error: error.message || "L·ªói khi l·∫•y danh s√°ch qu·∫£ng c√°o (Admin)",
      });
    } finally {
      set({ loading: false });
    }
  },

  // üîπ T·∫°o qu·∫£ng c√°o m·ªõi (ch·ªâ Admin)
  createAdvertisement: async (data) => {
    set({ loading: true, error: null });
    try {
      await axiosInstance.post(`/admin/advertisements`, data);
      await useAdvertisementStore.getState().getAllAdvertisements(); // Refresh danh s√°ch qu·∫£ng c√°o
    } catch (error: any) {
      set({ error: error.message || "L·ªói khi t·∫°o qu·∫£ng c√°o" });
    } finally {
      set({ loading: false });
    }
  },

  // üîπ C·∫≠p nh·∫≠t th√¥ng tin qu·∫£ng c√°o (Admin)
  updateAdvertisement: async (id, data) => {
    set({ loading: true, error: null });
    try {
      await axiosInstance.put(`/admin/advertisements/${id}`, data);
      await useAdvertisementStore.getState().getAllAdvertisements(); // Refresh danh s√°ch qu·∫£ng c√°o
    } catch (error: any) {
      set({ error: error.message || "L·ªói khi c·∫≠p nh·∫≠t qu·∫£ng c√°o" });
    } finally {
      set({ loading: false });
    }
  },

  // üîπ B·∫≠t / T·∫Øt tr·∫°ng th√°i qu·∫£ng c√°o (Admin)
  toggleAdvertisementActive: async (id) => {
    set({ loading: true, error: null });
    try {
      await axiosInstance.put(`/admin/advertisements/${id}/toggle-active`);
      await useAdvertisementStore.getState().getAllAdvertisements(); // Refresh danh s√°ch qu·∫£ng c√°o
    } catch (error: any) {
      set({ error: error.message || "L·ªói khi thay ƒë·ªïi tr·∫°ng th√°i qu·∫£ng c√°o" });
    } finally {
      set({ loading: false });
    }
  },

  // üîπ X√≥a qu·∫£ng c√°o (ch·ªâ Admin)
  deleteAdvertisement: async (advertisementId) => {
    set({ loading: true, error: null });
    try {
      await axiosInstance.delete(`/admin/advertisements/${advertisementId}`);
      await useAdvertisementStore.getState().getAllAdvertisements(); // Refresh danh s√°ch qu·∫£ng c√°o
    } catch (error: any) {
      set({ error: error.message || "L·ªói khi x√≥a qu·∫£ng c√°o" });
    } finally {
      set({ loading: false });
    }
  },
}));
